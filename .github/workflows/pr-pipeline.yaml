name: PR

on:
  push:
    branches:
      - cicd
permissions: write-all

jobs:
  pr-checks:
    defaults:
      run:
        # Ensure the environment is activated
        # <https://github.com/mamba-org/provision-with-micromamba#important>
        shell: bash -l {0}
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Python 3.11
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install -r requirements.txt
          pip install pre-commit pytest pytest-asyncio pytest-cov pytest-mock pytest-pretty
          pre-commit install

      - name: Run simplified pre-commit hooks
        run: |
          SKIP=pytest-check pre-commit run --all-files

      - name: Run unit tests
        run: |
          pytest -vv --cov=src tests/ --cov-report xml:coverage/coverage.xml
        env:
          EODH_AUTH__BASE_URL: ${{ secrets.EODH_AUTH__BASE_URL }}
          EODH_AUTH__REALM: ${{ secrets.EODH_AUTH__REALM }}
          EODH_AUTH__USERNAME: ${{ secrets.EODH_AUTH__USERNAME }}
          EODH_AUTH__PASSWORD: ${{ secrets.EODH_AUTH__PASSWORD }}
          EODH_AUTH__CLIENT_ID: ${{ secrets.EODH_AUTH__CLIENT_ID }}
          EODH_AUTH__CLIENT_SECRET: ${{ secrets.EODH_AUTH__CLIENT_SECRET }}

      - name: Get code coverage
        uses: orgoro/coverage@v3.2
        with:
          coverageFile: coverage/coverage.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          thresholdAll: 0.7
          thresholdNew: 0.7
          thresholdModified: 0.0

  build-and-push:
    runs-on: ubuntu-latest
    needs: pr-checks
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2
      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
      - name: Build Docker image
        run: |
          # Build the Docker image
          TAGS=("latest" "dev")
          docker build -t ${{ secrets.ECR_REPOSITORY }} .
          IMAGE_ID=$(docker images ${{ secrets.ECR_REPOSITORY }} --format "{{.ID}}" | head -n 1)
          ECR_URI=$(aws ecr describe-repositories --repository-names ${{ secrets.ECR_REPOSITORY }} --region ${{ vars.AWS_REGION }} --query "repositories[0].repositoryUri" --output text)
      - name: Push Docker image to Amazon ECR
        run: |
          for TAG in ${TAGS[@]}; do docker tag $IMAGE_ID ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:$TAG; done
          for TAG in ${TAGS[@]}; do docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:$TAG; done
