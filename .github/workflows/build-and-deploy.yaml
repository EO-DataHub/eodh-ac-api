name: build-and-deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggering from any branch

jobs:
  build-push-release-dev:
    runs-on: ubuntu-latest
    environment: dev
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Check out the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 # v5.0.0
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}

      - name: Build Docker image
        run: |
          # Build the Docker image
          docker build -t $ECR_REPOSITORY:latest .
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

      - name: Tag and push Docker image to Amazon ECR
        run: |
          # Get the ECR URI
          ECR_URI=$(aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION --query "repositories[0].repositoryUri" --output text)
          # Loop through the tags and push each one
          for TAG in $TAGS ${GITHUB_SHA}; do
            docker tag $ECR_REPOSITORY:latest $ECR_URI:$TAG
            docker push $ECR_URI:$TAG
          done
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          TAGS: ${{ vars.TAGS }}

      - name: Create file with environment variables
        run: |
          echo "ENVIRONMENT=dev" >> envs.env
          echo "EODH__BASE_URL=$EODH__BASE_URL" >> envs.env
          echo "EODH__CLIENT_ID=$EODH__CLIENT_ID" >> envs.env
          echo "EODH__PASSWORD=$EODH__PASSWORD" >> envs.env
          echo "EODH__REALM=$EODH__REALM" >> envs.env
          echo "EODH__USERNAME=$EODH__USERNAME" >> envs.env
          echo "EODH__WORKSPACE_SERVICES_ENDPOINT=$EODH__WORKSPACE_SERVICES_ENDPOINT" >> envs.env
          echo "EODH__STAC_API_ENDPOINT=$EODH__STAC_API_ENDPOINT" >> envs.env
          echo "EODH__CEDA_STAC_CATALOG_PATH=$EODH__CEDA_STAC_CATALOG_PATH" >> envs.env
          echo "ADES__URL=${ADES__URL}" >> envs.env
          echo "ADES__OGC_PROCESSES_API_PATH=$ADES__OGC_PROCESSES_API_PATH" >> envs.env
          echo "ADES__OGC_JOBS_API_PATH=$ADES__OGC_JOBS_API_PATH" >> envs.env
          echo "SENTINEL_HUB__CLIENT_ID=$SENTINEL_HUB__CLIENT_ID" >> envs.env
          echo "SENTINEL_HUB__CLIENT_SECRET=$SENTINEL_HUB__CLIENT_SECRET" >> envs.env
          echo "SENTINEL_HUB__TOKEN_URL=$SENTINEL_HUB__TOKEN_URL" >> envs.env
          echo "SENTINEL_HUB__STAC_API_ENDPOINT=$SENTINEL_HUB__STAC_API_ENDPOINT" >> envs.env
        env:
          EODH__BASE_URL: ${{ vars.EODH__BASE_URL }}
          EODH__CLIENT_ID: ${{ secrets.EODH__CLIENT_ID }}
          EODH__PASSWORD: ${{ secrets.EODH__PASSWORD }}
          EODH__REALM: ${{ vars.EODH__REALM }}
          EODH__USERNAME: ${{ secrets.EODH__USERNAME }}
          EODH__WORKSPACE_SERVICES_ENDPOINT: ${{ vars.EODH__WORKSPACE_SERVICES_ENDPOINT }}
          EODH__STAC_API_ENDPOINT: ${{ vars.EODH__STAC_API_ENDPOINT }}
          EODH__CEDA_STAC_CATALOG_PATH: ${{ vars.EODH__CEDA_STAC_CATALOG_PATH }}
          ADES__URL: ${{ vars.ADES__URL }}
          ADES__OGC_PROCESSES_API_PATH: ${{ vars.ADES__OGC_PROCESSES_API_PATH }}
          ADES__OGC_JOBS_API_PATH: ${{ vars.ADES__OGC_JOBS_API_PATH }}
          SENTINEL_HUB__CLIENT_ID: ${{ secrets.SENTINEL_HUB__CLIENT_ID }}
          SENTINEL_HUB__CLIENT_SECRET: ${{ secrets.SENTINEL_HUB__CLIENT_SECRET }}
          SENTINEL_HUB__TOKEN_URL: ${{ vars.SENTINEL_HUB__TOKEN_URL }}
          SENTINEL_HUB__STAC_API_ENDPOINT: ${{ vars.SENTINEL_HUB__STAC_API_ENDPOINT }}

      - name: Upload file as artifact
        run: |
          aws s3 cp envs.env s3://ukri-task-definition-variables/$TAGS/
        env:
          TAGS: ${{ vars.TAGS }}

      - name: Update ECS service
        run: |
          aws --region $AWS_REGION ecs update-service --cluster $TAGS --service $ECR_REPOSITORY --force-new-deployment
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          TAGS: ${{ vars.TAGS }}

  release-qa:
    runs-on: ubuntu-latest
    environment: qa
    needs: build-push-release-dev
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Check out the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 # v5.0.0
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}

      - name: Tag and push Docker image to Amazon ECR
        run: |
          # Get the ECR URI
          MANIFEST=$(aws ecr batch-get-image --repository-name $ECR_REPOSITORY --region $AWS_REGION --image-ids imageTag=${GITHUB_SHA} --query "images[].imageManifest" --output text)
          aws ecr put-image --repository-name $ECR_REPOSITORY --image-tag $TAGS --image-manifest "$MANIFEST" --region $AWS_REGION
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          TAGS: ${{ vars.TAGS }}

      - name: Create file with environment variables
        run: |
          echo "ENVIRONMENT=qa" >> envs.env
          echo "EODH__BASE_URL=$EODH__BASE_URL" >> envs.env
          echo "EODH__CLIENT_ID=$EODH__CLIENT_ID" >> envs.env
          echo "EODH__PASSWORD=$EODH__PASSWORD" >> envs.env
          echo "EODH__REALM=$EODH__REALM" >> envs.env
          echo "EODH__USERNAME=$EODH__USERNAME" >> envs.env
          echo "EODH__WORKSPACE_SERVICES_ENDPOINT=$EODH__WORKSPACE_SERVICES_ENDPOINT" >> envs.env
          echo "EODH__STAC_API_ENDPOINT=$EODH__STAC_API_ENDPOINT" >> envs.env
          echo "EODH__CEDA_STAC_CATALOG_PATH=$EODH__CEDA_STAC_CATALOG_PATH" >> envs.env
          echo "ADES__URL=$ADES__URL" >> envs.env
          echo "ADES__OGC_PROCESSES_API_PATH=$ADES__OGC_PROCESSES_API_PATH" >> envs.env
          echo "ADES__OGC_JOBS_API_PATH=$ADES__OGC_JOBS_API_PATH" >> envs.env
          echo "SENTINEL_HUB__CLIENT_ID=$SENTINEL_HUB__CLIENT_ID" >> envs.env
          echo "SENTINEL_HUB__CLIENT_SECRET=$SENTINEL_HUB__CLIENT_SECRET" >> envs.env
          echo "SENTINEL_HUB__TOKEN_URL=$SENTINEL_HUB__TOKEN_URL" >> envs.env
          echo "SENTINEL_HUB__STAC_API_ENDPOINT=$SENTINEL_HUB__STAC_API_ENDPOINT" >> envs.env
        env:
          EODH__BASE_URL: ${{ vars.EODH__BASE_URL }}
          EODH__CLIENT_ID: ${{ secrets.EODH__CLIENT_ID }}
          EODH__PASSWORD: ${{ secrets.EODH__PASSWORD }}
          EODH__REALM: ${{ vars.EODH__REALM }}
          EODH__USERNAME: ${{ secrets.EODH__USERNAME }}
          EODH__WORKSPACE_SERVICES_ENDPOINT: ${{ vars.EODH__WORKSPACE_SERVICES_ENDPOINT }}
          EODH__STAC_API_ENDPOINT: ${{ vars.EODH__STAC_API_ENDPOINT }}
          EODH__CEDA_STAC_CATALOG_PATH: ${{ vars.EODH__CEDA_STAC_CATALOG_PATH }}
          ADES__URL: ${{ vars.ADES__URL }}
          ADES__OGC_PROCESSES_API_PATH: ${{ vars.ADES__OGC_PROCESSES_API_PATH }}
          ADES__OGC_JOBS_API_PATH: ${{ vars.ADES__OGC_JOBS_API_PATH }}
          SENTINEL_HUB__CLIENT_ID: ${{ secrets.SENTINEL_HUB__CLIENT_ID }}
          SENTINEL_HUB__CLIENT_SECRET: ${{ secrets.SENTINEL_HUB__CLIENT_SECRET }}
          SENTINEL_HUB__TOKEN_URL: ${{ vars.SENTINEL_HUB__TOKEN_URL }}
          SENTINEL_HUB__STAC_API_ENDPOINT: ${{ vars.SENTINEL_HUB__STAC_API_ENDPOINT }}

      - name: Upload file as artifact
        run: |
          aws s3 cp envs.env s3://ukri-task-definition-variables/$TAGS/
        env:
          TAGS: ${{ vars.TAGS }}

      - name: Update ECS service
        run: |
          aws --region $AWS_REGION ecs update-service --cluster $TAGS --service $ECR_REPOSITORY --force-new-deployment
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          TAGS: ${{ vars.TAGS }}

  release-staging:
    runs-on: ubuntu-latest
    environment: staging
    needs: release-qa
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Check out the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 # v5.0.0
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}

      - name: Tag and push Docker image to Amazon ECR
        run: |
          # Get the ECR URI
          MANIFEST=$(aws ecr batch-get-image --repository-name $ECR_REPOSITORY --region $AWS_REGION --image-ids imageTag=${GITHUB_SHA} --query "images[].imageManifest" --output text)
          aws ecr put-image --repository-name $ECR_REPOSITORY --image-tag $TAGS --image-manifest "$MANIFEST" --region $AWS_REGION
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          TAGS: ${{ vars.TAGS }}

      - name: Create file with environment variables
        run: |
          echo "ENVIRONMENT=staging" >> envs.env
          echo "EODH__BASE_URL=$EODH__BASE_URL" >> envs.env
          echo "EODH__CLIENT_ID=$EODH__CLIENT_ID" >> envs.env
          echo "EODH__PASSWORD=$EODH__PASSWORD" >> envs.env
          echo "EODH__REALM=$EODH__REALM" >> envs.env
          echo "EODH__USERNAME=$EODH__USERNAME" >> envs.env
          echo "EODH__WORKSPACE_SERVICES_ENDPOINT=$EODH__WORKSPACE_SERVICES_ENDPOINT" >> envs.env
          echo "EODH__STAC_API_ENDPOINT=$EODH__STAC_API_ENDPOINT" >> envs.env
          echo "EODH__CEDA_STAC_CATALOG_PATH=$EODH__CEDA_STAC_CATALOG_PATH" >> envs.env
          echo "ADES__URL=$ADES__URL" >> envs.env
          echo "ADES__OGC_PROCESSES_API_PATH=$ADES__OGC_PROCESSES_API_PATH" >> envs.env
          echo "ADES__OGC_JOBS_API_PATH=$ADES__OGC_JOBS_API_PATH" >> envs.env
          echo "SENTINEL_HUB__CLIENT_ID=$SENTINEL_HUB__CLIENT_ID" >> envs.env
          echo "SENTINEL_HUB__CLIENT_SECRET=$SENTINEL_HUB__CLIENT_SECRET" >> envs.env
          echo "SENTINEL_HUB__TOKEN_URL=$SENTINEL_HUB__TOKEN_URL" >> envs.env
          echo "SENTINEL_HUB__STAC_API_ENDPOINT=$SENTINEL_HUB__STAC_API_ENDPOINT" >> envs.env
        env:
          EODH__BASE_URL: ${{ vars.EODH__BASE_URL }}
          EODH__CLIENT_ID: ${{ secrets.EODH__CLIENT_ID }}
          EODH__PASSWORD: ${{ secrets.EODH__PASSWORD }}
          EODH__REALM: ${{ vars.EODH__REALM }}
          EODH__USERNAME: ${{ secrets.EODH__USERNAME }}
          EODH__WORKSPACE_SERVICES_ENDPOINT: ${{ vars.EODH__WORKSPACE_SERVICES_ENDPOINT }}
          EODH__STAC_API_ENDPOINT: ${{ vars.EODH__STAC_API_ENDPOINT }}
          EODH__CEDA_STAC_CATALOG_PATH: ${{ vars.EODH__CEDA_STAC_CATALOG_PATH }}
          ADES__URL: ${{ vars.ADES__URL }}
          ADES__OGC_PROCESSES_API_PATH: ${{ vars.ADES__OGC_PROCESSES_API_PATH }}
          ADES__OGC_JOBS_API_PATH: ${{ vars.ADES__OGC_JOBS_API_PATH }}
          SENTINEL_HUB__CLIENT_ID: ${{ secrets.SENTINEL_HUB__CLIENT_ID }}
          SENTINEL_HUB__CLIENT_SECRET: ${{ secrets.SENTINEL_HUB__CLIENT_SECRET }}
          SENTINEL_HUB__TOKEN_URL: ${{ vars.SENTINEL_HUB__TOKEN_URL }}
          SENTINEL_HUB__STAC_API_ENDPOINT: ${{ vars.SENTINEL_HUB__STAC_API_ENDPOINT }}

      - name: Upload file as artifact
        run: |
          aws s3 cp envs.env s3://ukri-task-definition-variables/$TAGS/
        env:
          TAGS: ${{ vars.TAGS }}

      - name: Update ECS service
        run: |
          aws --region $AWS_REGION ecs update-service --cluster $TAGS --service $ECR_REPOSITORY --force-new-deployment
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          TAGS: ${{ vars.TAGS }}

  release-prod:
    runs-on: ubuntu-latest
    environment: prod
    needs: release-staging
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Check out the repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 # v5.0.0
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}

      - name: Tag and push Docker image to Amazon ECR
        run: |
          # Get the ECR URI
          MANIFEST=$(aws ecr batch-get-image --repository-name $ECR_REPOSITORY --region $AWS_REGION --image-ids imageTag=${GITHUB_SHA} --query "images[].imageManifest" --output text)
          aws ecr put-image --repository-name $ECR_REPOSITORY --image-tag $TAGS --image-manifest "$MANIFEST" --region $AWS_REGION
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          TAGS: ${{ vars.TAGS }}

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 # v5.0.0
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_PROD }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Create file with environment variables
        run: |
          echo "ENVIRONMENT=prod" >> envs.env
          echo "EODH__BASE_URL=$EODH__BASE_URL" >> envs.env
          echo "EODH__CLIENT_ID=$EODH__CLIENT_ID" >> envs.env
          echo "EODH__PASSWORD=$EODH__PASSWORD" >> envs.env
          echo "EODH__REALM=$EODH__REALM" >> envs.env
          echo "EODH__USERNAME=$EODH__USERNAME" >> envs.env
          echo "EODH__WORKSPACE_SERVICES_ENDPOINT=$EODH__WORKSPACE_SERVICES_ENDPOINT" >> envs.env
          echo "EODH__STAC_API_ENDPOINT=$EODH__STAC_API_ENDPOINT" >> envs.env
          echo "EODH__CEDA_STAC_CATALOG_PATH=$EODH__CEDA_STAC_CATALOG_PATH" >> envs.env
          echo "ADES__URL=$ADES__URL" >> envs.env
          echo "ADES__OGC_PROCESSES_API_PATH=$ADES__OGC_PROCESSES_API_PATH" >> envs.env
          echo "ADES__OGC_JOBS_API_PATH=$ADES__OGC_JOBS_API_PATH" >> envs.env
          echo "SENTINEL_HUB__CLIENT_ID=$SENTINEL_HUB__CLIENT_ID" >> envs.env
          echo "SENTINEL_HUB__CLIENT_SECRET=$SENTINEL_HUB__CLIENT_SECRET" >> envs.env
          echo "SENTINEL_HUB__TOKEN_URL=$SENTINEL_HUB__TOKEN_URL" >> envs.env
          echo "SENTINEL_HUB__STAC_API_ENDPOINT=$SENTINEL_HUB__STAC_API_ENDPOINT" >> envs.env
        env:
          EODH__BASE_URL: ${{ vars.EODH__BASE_URL }}
          EODH__CLIENT_ID: ${{ secrets.EODH__CLIENT_ID }}
          EODH__PASSWORD: ${{ secrets.EODH__PASSWORD }}
          EODH__REALM: ${{ vars.EODH__REALM }}
          EODH__USERNAME: ${{ secrets.EODH__USERNAME }}
          EODH__WORKSPACE_SERVICES_ENDPOINT: ${{ vars.EODH__WORKSPACE_SERVICES_ENDPOINT }}
          EODH__STAC_API_ENDPOINT: ${{ vars.EODH__STAC_API_ENDPOINT }}
          EODH__CEDA_STAC_CATALOG_PATH: ${{ vars.EODH__CEDA_STAC_CATALOG_PATH }}
          ADES__URL: ${{ vars.ADES__URL }}
          ADES__OGC_PROCESSES_API_PATH: ${{ vars.ADES__OGC_PROCESSES_API_PATH }}
          ADES__OGC_JOBS_API_PATH: ${{ vars.ADES__OGC_JOBS_API_PATH }}
          SENTINEL_HUB__CLIENT_ID: ${{ secrets.SENTINEL_HUB__CLIENT_ID }}
          SENTINEL_HUB__CLIENT_SECRET: ${{ secrets.SENTINEL_HUB__CLIENT_SECRET }}
          SENTINEL_HUB__TOKEN_URL: ${{ vars.SENTINEL_HUB__TOKEN_URL }}
          SENTINEL_HUB__STAC_API_ENDPOINT: ${{ vars.SENTINEL_HUB__STAC_API_ENDPOINT }}

      - name: Upload file as artifact
        run: |
          aws s3 cp envs.env s3://prod-ukri-task-definition-variables/$TAGS/
        env:
          TAGS: ${{ vars.TAGS }}

      - name: Update ECS service
        run: |
          aws --region $AWS_REGION ecs update-service --cluster $TAGS --service $ECR_REPOSITORY --force-new-deployment
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          TAGS: ${{ vars.TAGS }}
