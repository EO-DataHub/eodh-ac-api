name: build-and-deploy

on:
  push:
    branches:
      - main
jobs:
  build-push-release-dev:
    runs-on: ubuntu-latest
    environment: dev
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
      - name: Build Docker image
        run: |
          # Build the Docker image
          docker build -t ${{ secrets.ECR_REPOSITORY }}:latest .
      - name: Tag and push Docker image to Amazon ECR
        run: |
          # Get the ECR URI
          ECR_URI=$(aws ecr describe-repositories --repository-names ${{ secrets.ECR_REPOSITORY }} --region ${{ vars.AWS_REGION }} --query "repositories[0].repositoryUri" --output text)
          # Loop through the tags and push each one
          for TAG in ${{ vars.TAGS }} ${GITHUB_SHA}; do
            docker tag ${{ secrets.ECR_REPOSITORY }}:latest $ECR_URI:$TAG
            docker push $ECR_URI:$TAG
          done
      - name: Create file with environment variables
        run: |
          echo "EODH_AUTH__API_TOKEN=${{ secrets.EODH_AUTH__API_TOKEN }}" >> envs.env
          echo "EODH_AUTH__BASE_URL=${{ secrets.EODH_AUTH__BASE_URL }}" > envs.env
          echo "EODH_AUTH__CLIENT_ID=${{ secrets.EODH_AUTH__CLIENT_ID }}" >> envs.env
          echo "EODH_AUTH__PASSWORD=${{ secrets.EODH_AUTH__PASSWORD }}" >> envs.env
          echo "EODH_AUTH__REALM=${{ secrets.EODH_AUTH__REALM }}" >> envs.env
          echo "EODH_AUTH__USERNAME=${{ secrets.EODH_AUTH__USERNAME }}" >> envs.env
          echo "EODH_AUTH__WORKSPACE_TOKENS_URL=${{ secrets.EODH_AUTH__WORKSPACE_TOKENS_URL }}" >> envs.env
          echo "EODH_AUTH__TMP_S3_CREDENTIALS_URL=${{ secrets.EODH_AUTH__TMP_S3_CREDENTIALS_URL }}" >> envs.env
          echo "ADES__URL=${{ secrets.ADES__URL }}" >> envs.env
          echo "ADES__OGC_PROCESSES_API_PATH=${{ secrets.ADES__OGC_PROCESSES_API_PATH }}" >> envs.env
          echo "ADES__OGC_JOBS_API_PATH=${{ secrets.ADES__OGC_JOBS_API_PATH }}" >> envs.env
          echo "SENTINEL_HUB__CLIENT_ID=${{ secrets.SENTINEL_HUB__CLIENT_ID }}" >> envs.env
          echo "SENTINEL_HUB__CLIENT_SECRET=${{ secrets.SENTINEL_HUB__CLIENT_SECRET }}" >> envs.env
      - name: Upload file as artifact
        run: |
          aws s3 cp envs.env s3://ukri-task-definition-variables/${{ vars.TAGS }}/
      - name: Update ECS service
        run: |
          aws --region ${{ vars.AWS_REGION }} ecs update-service --cluster ${{ vars.TAGS }} --service ${{ secrets.ECR_REPOSITORY }} --force-new-deployment
  release-qa:
    runs-on: ubuntu-latest
    environment: qa
    needs: build-push-release-dev
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
      - name: Tag and push Docker image to Amazon ECR
        run: |
          # Get the ECR URI
          MANIFEST=$(aws ecr batch-get-image --repository-name ${{ secrets.ECR_REPOSITORY }} --region ${{ vars.AWS_REGION }} --image-ids imageTag=${GITHUB_SHA} --query 'images[].imageManifest' --output text)
          aws ecr put-image --repository-name ${{ secrets.ECR_REPOSITORY }} --image-tag ${{ vars.TAGS }} --image-manifest "$MANIFEST" --region ${{ vars.AWS_REGION }}
      - name: Create file with environment variables
        run: |
          echo "EODH_AUTH__API_TOKEN=${{ secrets.EODH_AUTH__API_TOKEN }}" >> envs.env
          echo "EODH_AUTH__BASE_URL=${{ secrets.EODH_AUTH__BASE_URL }}" > envs.env
          echo "EODH_AUTH__CLIENT_ID=${{ secrets.EODH_AUTH__CLIENT_ID }}" >> envs.env
          echo "EODH_AUTH__PASSWORD=${{ secrets.EODH_AUTH__PASSWORD }}" >> envs.env
          echo "EODH_AUTH__REALM=${{ secrets.EODH_AUTH__REALM }}" >> envs.env
          echo "EODH_AUTH__USERNAME=${{ secrets.EODH_AUTH__USERNAME }}" >> envs.env
          echo "EODH_AUTH__WORKSPACE_TOKENS_URL=${{ secrets.EODH_AUTH__WORKSPACE_TOKENS_URL }}" >> envs.env
          echo "EODH_AUTH__TMP_S3_CREDENTIALS_URL=${{ secrets.EODH_AUTH__TMP_S3_CREDENTIALS_URL }}" >> envs.env
          echo "ADES__URL=${{ secrets.ADES__URL }}" >> envs.env
          echo "ADES__OGC_PROCESSES_API_PATH=${{ secrets.ADES__OGC_PROCESSES_API_PATH }}" >> envs.env
          echo "ADES__OGC_JOBS_API_PATH=${{ secrets.ADES__OGC_JOBS_API_PATH }}" >> envs.env
          echo "SENTINEL_HUB__CLIENT_ID=${{ secrets.SENTINEL_HUB__CLIENT_ID }}" >> envs.env
          echo "SENTINEL_HUB__CLIENT_SECRET=${{ secrets.SENTINEL_HUB__CLIENT_SECRET }}" >> envs.env
      - name: Upload file as artifact
        run: |
          aws s3 cp envs.env s3://ukri-task-definition-variables/${{ vars.TAGS }}/
      - name: Update ECS service
        run: |
          aws --region ${{ vars.AWS_REGION }} ecs update-service --cluster ${{ vars.TAGS }} --service ${{ secrets.ECR_REPOSITORY }} --force-new-deployment
  release-staging:
    runs-on: ubuntu-latest
    environment: staging
    needs: release-qa
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
      - name: Tag and push Docker image to Amazon ECR
        run: |
          # Get the ECR URI
          MANIFEST=$(aws ecr batch-get-image --repository-name ${{ secrets.ECR_REPOSITORY }} --region ${{ vars.AWS_REGION }} --image-ids imageTag=${GITHUB_SHA} --query 'images[].imageManifest' --output text)
          aws ecr put-image --repository-name ${{ secrets.ECR_REPOSITORY }} --image-tag ${{ vars.TAGS }} --image-manifest "$MANIFEST" --region ${{ vars.AWS_REGION }}
      - name: Create file with environment variables
        run: |
          echo "EODH_AUTH__API_TOKEN=${{ secrets.EODH_AUTH__API_TOKEN }}" >> envs.env
          echo "EODH_AUTH__BASE_URL=${{ secrets.EODH_AUTH__BASE_URL }}" > envs.env
          echo "EODH_AUTH__CLIENT_ID=${{ secrets.EODH_AUTH__CLIENT_ID }}" >> envs.env
          echo "EODH_AUTH__PASSWORD=${{ secrets.EODH_AUTH__PASSWORD }}" >> envs.env
          echo "EODH_AUTH__REALM=${{ secrets.EODH_AUTH__REALM }}" >> envs.env
          echo "EODH_AUTH__USERNAME=${{ secrets.EODH_AUTH__USERNAME }}" >> envs.env
          echo "EODH_AUTH__WORKSPACE_TOKENS_URL=${{ secrets.EODH_AUTH__WORKSPACE_TOKENS_URL }}" >> envs.env
          echo "EODH_AUTH__TMP_S3_CREDENTIALS_URL=${{ secrets.EODH_AUTH__TMP_S3_CREDENTIALS_URL }}" >> envs.env
          echo "ADES__URL=${{ secrets.ADES__URL }}" >> envs.env
          echo "ADES__OGC_PROCESSES_API_PATH=${{ secrets.ADES__OGC_PROCESSES_API_PATH }}" >> envs.env
          echo "ADES__OGC_JOBS_API_PATH=${{ secrets.ADES__OGC_JOBS_API_PATH }}" >> envs.env
          echo "SENTINEL_HUB__CLIENT_ID=${{ secrets.SENTINEL_HUB__CLIENT_ID }}" >> envs.env
          echo "SENTINEL_HUB__CLIENT_SECRET=${{ secrets.SENTINEL_HUB__CLIENT_SECRET }}" >> envs.env
      - name: Upload file as artifact
        run: |
          aws s3 cp envs.env s3://ukri-task-definition-variables/${{ vars.TAGS }}/
      - name: Update ECS service
        run: |
          aws --region ${{ vars.AWS_REGION }} ecs update-service --cluster ${{ vars.TAGS }} --service ${{ secrets.ECR_REPOSITORY }} --force-new-deployment
