[project]
name = 'eodh-ac-api'
description = 'API for interacting with Action Creator component and scheduling spatial computation in EO Data Hub.'
version = '0.0.1'
requires-python = '>=3.13.0'
authors = [
    { name = 'xultaeculcis' }
]
classifiers = [
    'Development Status :: 3 - Alpha',
    'Environment :: Console',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3 :: Only',
    'Programming Language :: Python :: 3.11',
    'Intended Audience :: Developers',
    'Intended Audience :: Information Technology',
    'Intended Audience :: System Administrators',
    'License :: OSI Approved :: BSD-3-Clause',
    'Operating System :: POSIX :: Linux',
    'Topic :: Software Development :: Libraries :: Python Modules',
]
license = "BSD-3-Clause"
license-files = ["LICENSE"]

dependencies = [
    "aiodns>=3.5.0",
    "aiohttp-retry>=2.9.1",
    "aiohttp[speedups]>=3.12.15",
    "cryptography>=45.0.5",
    "cwltool>=3.1.20250715140722",
    "fastapi[standard]>=0.116.1",
    "geojson-pydantic>=2.0.0",
    "geopandas>=1.1.1",
    "matplotlib>=3.10.3",
    "networkx>=3.5",
    "oauthlib>=3.3.1",
    "pydantic>=2.11.7",
    "pydantic-settings>=2.10.1",
    "pygraphviz>=1.14",
    "pyjwt>=2.10.1",
    "pyproj>=3.7.1",
    "pystac>=1.13.0",
    "pystac-client>=0.9.0",
    "python-dotenv>=1.1.0",
    "requests-oauthlib>=2.0.0",
    "retry>=0.9.2",
    "shapely>=2.1.1",
    "stac-pydantic>=3.4.0",
    "uvicorn>=0.35.0",
    "websockets>=15.0.1",
]
[dependency-groups]
dev = [
    "coverage>=7.10.1",
    "flaky>=3.8.1",
    "gha-update>=0.2.0",
    "interrogate>=1.7.0",
    "jupyter>=1.1.1",
    "jupyterlab>=4.4.1",
    "mock>=5.2.0",
    "mypy>=1.17.0",
    "notebook>=7.4.1",
    "pre-commit>=4.2.0",
    "pretty>=0.1",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "ruff>=0.12.7",
    "types-click-spinner>=0.1.13.20240311",
    "types-dataclasses>=0.6.6",
    "types-dateparser>=1.2.0.20250408",
    "types-decorator>=5.2.0.20250324",
    "types-docutils>=0.21.0.20241128",
    "types-frozendict>=2.0.9",
    "types-futures>=3.3.8",
    "types-mock>=5.2.0.20250306",
    "types-mypy-extensions>=1.1.0.20250425",
    "types-psutil>=7.0.0.20250401",
    "types-pytz>=2025.2.0.20250326",
    "types-pyyaml>=6.0.12.20250402",
    "types-retry>=0.9.9.20250322",
    "types-setuptools>=80.0.0.20250429",
    "types-tqdm>=4.67.0.20250417",
]
docs = [
    "griffe-pydantic>=1.1.4",
    "mkdocs>=1.6.1",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-glightbox>=0.4.0",
    "mkdocs-jupyter>=0.25.1",
    "mkdocs-material>=9.6.12",
    "mkdocstrings[python]>=0.29.1",
]

[project.urls]
Homepage = 'https://github.com/EO-DataHub/eodh-ac-api'

[tool.setuptools.dynamic]
readme = { file = ["README.md"] }

[tool.ruff]
show-fixes = true
target-version = "py313"
line-length = 120
extend-exclude = [
    "docs/*",
    "data/*",
    "logs/*",
    "mlruns/*",
    "*.http",
]

[tool.ruff.lint]
select = [
    "D", # see: https://pypi.org/project/pydocstyle
    "F", # see: https://pypi.org/project/Pyflakes
    "E", "W", # see: https://pypi.org/project/pycodestyle
    "C90", # see: https://pypi.org/project/mccabe
    "I", # see: https://pypi.org/project/isort
    "N", # see: https://pypi.org/project/pep8-naming
    "UP", # see: https://pypi.org/project/pyupgrade
    "YTT", # see: https://pypi.org/project/flake8-2020
    "ANN", # see: https://pypi.org/project/flake8-annotations
    "ASYNC", # see: https://pypi.org/project/flake8-async
    "ASYNC1", # see: https://pypi.org/project/flake8-trio
    "S", # see: https://pypi.org/project/flake8-bandit
    "BLE", # see: https://pypi.org/project/flake8-blind-except
    "FBT", # see: https://pypi.org/project/flake8-boolean-trap
    "B", # see: https://pypi.org/project/flake8-bugbear
    "A", # see: https://pypi.org/project/flake8-builtins
    "C4", # see: https://pypi.org/project/flake8-comprehensions
    "DTZ", # see: https://pypi.org/project/flake8-datetimez
    "T10", # see: https://pypi.org/project/flake8-debugger
    "EM", # see: https://pypi.org/project/flake8-errmsg
    "EXE", # see: https://pypi.org/project/flake8-executable
    "FA", # see: https://pypi.org/project/flake8-future-annotations
    "ICN", # see: https://pypi.org/project/flake8-import-conventions
    "G", # see: https://pypi.org/project/flake8-logging-format
    "INP", # see: https://pypi.org/project/flake8-no-pep420
    "PIE", # see: https://pypi.org/project/flake8-pie
    "T20", # see: https://pypi.org/project/flake8-print
    "PYI", # see: https://pypi.org/project/flake8-pyi
    "PT", # see: https://pypi.org/project/flake8-pytest-style
    "Q", # see: https://pypi.org/project/flake8-quotes
    "RSE", # see: https://pypi.org/project/flake8-raise
    "RET", # see: https://pypi.org/project/flake8-return
    "SLF", # see: https://pypi.org/project/flake8-self
    "SLOT", # see: https://pypi.org/project/flake8-slots
    "SIM", # see: https://pypi.org/project/flake8-simplify
    "TID", # see: https://pypi.org/project/flake8-tidy-imports
    "TCH", # see: https://pypi.org/project/flake8-type-checking
    "INT", # see: https://pypi.org/project/flake8-gettext
    "ARG", # see: https://pypi.org/project/flake8-unused-arguments
    "PTH", # see: https://pypi.org/project/flake8-use-pathlib
    "ERA", # see: https://pypi.org/project/eradicate
    "PD", # see: https://pypi.org/project/pandas-vet
    "PGH", # see: https://pypi.org/project/pygrep-hooks
    "PL", # see: https://pypi.org/project/Pylint
    "TRY", # see: https://pypi.org/project/tryceratops
    "FLY", # see: https://pypi.org/project/flynt
    "NPY", # see: https://pypi.org/project/NumPy-specific rules
    "AIR", # see: https://pypi.org/project/Airflow
    "PERF", # see: https://pypi.org/project/Perflint
    "FURB", # see: https://pypi.org/project/refurb
    "LOG", # see: https://pypi.org/project/flake8-logging
    "RUF", # Ruff-specific rules
]
ignore = [
    "A005", # see: https://pypi.org/project/flake8-builtins - A005 Module `XXX` is shadowing a Python builtin module
    "ANN401", # see: https://pypi.org/project/flake8-annotations - Dynamically typed expressions (typing.Any) are disallowed
    "D1", # see: https://pypi.org/project/pydocstyle - D1 - undocumented public member - too restrictive
    "COM", # see: https://pypi.org/project/flake8-commas - conflicts with formatter
    "ISC", # see: https://pypi.org/project/flake8-implicit-str-concat - conflicts with formatter
    "CPY", # see: https://pypi.org/project/flake8-copyright - not used
    "DJ", # see: https://pypi.org/project/flake8-django - not used
    "TD", # see: https://pypi.org/project/flake8-todos - too restrictive
    "FIX", # see: https://pypi.org/project/flake8-fixme - too restrictive
    "PLR0913", # see: https://pypi.org/project/Pylint - Too many arguments in function definition
    "PLR0917", # see: https://pypi.org/project/Pylint - Too many positional arguments
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]
combine-as-imports = true

[tool.ruff.lint.per-file-ignores]
"**/{tests}/*" = [
    "S101", # Allow "use of assert detected"
    "PLC2701", # Allow private imports
    "S404", # Allow subprocess usage in tests
]
"src/services/validation_utils.py" = [
    "RUF027", # see: https://pypi.org/project/Pylint - Possible f-string without an `f` prefix
]
"src/api/v1_0/action_creator/routes.py" = [
    "PLR0912", # see: https://pypi.org/project/Pylint - Too many branches
]
"src/api/v1_3/action_creator/schemas/errors.py" = [
    "RUF027", # see: https://pypi.org/project/Pylint - Possible f-string without an `f` prefix
]
"tests/fakes/ades.py" = [
    "ARG002", # see: https://pypi.org/project/flake8-unused-arguments - Unused method argument
    "PLR6301", # see: https://pypi.org/project/Pylint - Method `X` could be a function, class method, or static method
    "E501", # see: https://pypi.org/project/pycodestyle - Line too long
]
"**/{schemas}/*" = ["TCH001", "TCH002", "TCH003"]  # Ignore "Move to TYPE_CHECKING block" issues in FastAPI schema files
"**/routes.py" = ["TCH001", "TCH002", "TCH003"]  # Ignore "Move to TYPE_CHECKING block" issues in FastAPI route files
"http-clients/*" = ["INP001"]  # Ignore part of an implicit namespace package errors in http-clients dir
[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.pytest.ini_options]
addopts = "--ignore data --ignore notebooks --ignore build_tools --ignore examples --ignore docs"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "api: mark a test as a API test.",
    "unit: mark a test as a unit test.",
    "integration: mark test as an integration test.",
    "e2e: mark test as an end to end test.",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::FutureWarning:",
    "ignore::DeprecationWarning:",
]

[tool.check-manifest]
ignore = [
    ".binder/**",
    ".all-contributorsrc",
    ".coveragerc",
    "examples/**",
    "build_tools/**",
    "__check_build/**",
    "docs/**",
    "Makefile",
    "CODEOWNERS",
    "CONTRIBUTING.md",
    "*.yaml",
    "*.yml"
]

[tool.mypy]
exclude = [
    'venv',
    '\.venv',
    '\.git',
    '__pycache__',
    'configs',
    'data',
    'logs',
    'outputs',
    'models',
]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_return_any = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = [
    "aiohttp.*",
    "aiohttp_retry.*",
    "dotenv.*",
    "fastapi.*",
    "fastapi_hypermodel.*",
    "flaky.*",
    "geojson_pydantic.*",
    "geopandas.*",
    "httpx.*",
    "jwt.*",
    "mkdocs_gen_files.*",
    "matplotlib.*",
    "networkx.*",
    "pandas.*",
    "pydantic.*",
    "pydantic_core.*",
    "pydantic_settings.*",
    "pyproj.*",
    "pystac.*",
    "pystac_client.*",
    "requests_oauthlib.*",
    "shapely.*",
    "stac_pydantic.*",
    "starlette.*",
    "uvicorn.*",
]
ignore_missing_imports = true
ignore_errors = true

[tool.interrogate]
ignore-init-module = true
ignore_init_method = true
exclude = ["tests", "docs", "site"]
omit-covered-files = true

[tool.coverage.run]
source = ['src']
branch = true
omit = ["tests/*"]

[tool.coverage.report]
show_missing = true
precision = 2
exclude_lines = [
    'pragma: no cover',
    'raise NotImplementedError',
    'if typing.TYPE_CHECKING:',
    'if TYPE_CHECKING:',
    "if t.TYPE_CHECKING:",
    "return NotImplemented",
    "except KeyboardInterrupt as exc",
    "except ImportError:",
    '@overload',
]

[tool.docformatter]
recursive = true
wrap-summaries = 120
wrap-descriptions = 120
blank = true
